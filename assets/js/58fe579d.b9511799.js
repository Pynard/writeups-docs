"use strict";(self.webpackChunkwriteups_docs=self.webpackChunkwriteups_docs||[]).push([[4922],{3905:(e,n,r)=>{r.d(n,{Zo:()=>s,kt:()=>m});var t=r(7294);function a(e,n,r){return n in e?Object.defineProperty(e,n,{value:r,enumerable:!0,configurable:!0,writable:!0}):e[n]=r,e}function o(e,n){var r=Object.keys(e);if(Object.getOwnPropertySymbols){var t=Object.getOwnPropertySymbols(e);n&&(t=t.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),r.push.apply(r,t)}return r}function l(e){for(var n=1;n<arguments.length;n++){var r=null!=arguments[n]?arguments[n]:{};n%2?o(Object(r),!0).forEach((function(n){a(e,n,r[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(r)):o(Object(r)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(r,n))}))}return e}function i(e,n){if(null==e)return{};var r,t,a=function(e,n){if(null==e)return{};var r,t,a={},o=Object.keys(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||(a[r]=e[r]);return a}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(t=0;t<o.length;t++)r=o[t],n.indexOf(r)>=0||Object.prototype.propertyIsEnumerable.call(e,r)&&(a[r]=e[r])}return a}var c=t.createContext({}),p=function(e){var n=t.useContext(c),r=n;return e&&(r="function"==typeof e?e(n):l(l({},n),e)),r},s=function(e){var n=p(e.components);return t.createElement(c.Provider,{value:n},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var n=e.children;return t.createElement(t.Fragment,{},n)}},f=t.forwardRef((function(e,n){var r=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,s=i(e,["components","mdxType","originalType","parentName"]),u=p(r),f=a,m=u["".concat(c,".").concat(f)]||u[f]||d[f]||o;return r?t.createElement(m,l(l({ref:n},s),{},{components:r})):t.createElement(m,l({ref:n},s))}));function m(e,n){var r=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var o=r.length,l=new Array(o);l[0]=f;var i={};for(var c in n)hasOwnProperty.call(n,c)&&(i[c]=n[c]);i.originalType=e,i[u]="string"==typeof e?e:a,l[1]=i;for(var p=2;p<o;p++)l[p]=r[p];return t.createElement.apply(null,l)}return t.createElement.apply(null,r)}f.displayName="MDXCreateElement"},591:(e,n,r)=>{r.r(n),r.d(n,{assets:()=>c,contentTitle:()=>l,default:()=>u,frontMatter:()=>o,metadata:()=>i,toc:()=>p});var t=r(7462),a=(r(7294),r(3905));const o={},l="KEEP WALKING",i={unversionedId:"2020/BRIXEL/challenges/keep_walking",id:"2020/BRIXEL/challenges/keep_walking",title:"KEEP WALKING",description:"Here a simple python code do the trick",source:"@site/docs/2020/BRIXEL/challenges/keep_walking.md",sourceDirName:"2020/BRIXEL/challenges",slug:"/2020/BRIXEL/challenges/keep_walking",permalink:"/writeups-docs/docs/2020/BRIXEL/challenges/keep_walking",draft:!1,editUrl:"https://github.com/pynard/writeups-docs/tree/main/docs/2020/BRIXEL/challenges/keep_walking.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"GOODBYE",permalink:"/writeups-docs/docs/2020/BRIXEL/challenges/goodbye"},next:{title:"MESSAGE_FROM_SPACE",permalink:"/writeups-docs/docs/2020/BRIXEL/challenges/message_from_space"}},c={},p=[],s={toc:p};function u(e){let{components:n,...r}=e;return(0,a.kt)("wrapper",(0,t.Z)({},s,r,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"keep-walking"},"KEEP WALKING"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"This is a challenge to test your basic programming skills.\n\n\nPseudo code:\n\nSet X = 1\n\nSet Y = 1\n\nSet previous answer = 1\n\n\nanswer = X * Y + previous answer + 3\n\n\nAfter that => X + 1 and Y + 1 ('answer' becomes 'previous answer') and repeat this till you have X = 525.\n\n\nThe final answer is the value of 'answer' when X = 525. Fill it in below.\n\n\nExample:\n\n5 = 1 * 1 + 1 + 3\n\n12 = 2 * 2 + 5 + 3\n\n24 = 3 * 3 + 12 + 3\n\n........................\n\n........................\n")),(0,a.kt)("p",null,"Here a simple python code do the trick"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"prev = 1 \nfor XY in range(1,526):\n    curr = XY*XY + prev + 3 \n    prev = curr\nprint('brixelCTF{'+str(curr)+'}')\n")),(0,a.kt)("p",null,"Response :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"brixelCTF{48373851}\n")),(0,a.kt)("p",null,"flag : ",(0,a.kt)("inlineCode",{parentName:"p"},"brixelCTF{48373851}")))}u.isMDXComponent=!0}}]);