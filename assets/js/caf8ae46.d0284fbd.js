"use strict";(self.webpackChunkwriteups_docs=self.webpackChunkwriteups_docs||[]).push([[7979],{3905:(e,n,c)=>{c.d(n,{Zo:()=>l,kt:()=>p});var r=c(7294);function t(e,n,c){return n in e?Object.defineProperty(e,n,{value:c,enumerable:!0,configurable:!0,writable:!0}):e[n]=c,e}function a(e,n){var c=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),c.push.apply(c,r)}return c}function o(e){for(var n=1;n<arguments.length;n++){var c=null!=arguments[n]?arguments[n]:{};n%2?a(Object(c),!0).forEach((function(n){t(e,n,c[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(c)):a(Object(c)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(c,n))}))}return e}function x(e,n){if(null==e)return{};var c,r,t=function(e,n){if(null==e)return{};var c,r,t={},a=Object.keys(e);for(r=0;r<a.length;r++)c=a[r],n.indexOf(c)>=0||(t[c]=e[c]);return t}(e,n);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(r=0;r<a.length;r++)c=a[r],n.indexOf(c)>=0||Object.prototype.propertyIsEnumerable.call(e,c)&&(t[c]=e[c])}return t}var d=r.createContext({}),i=function(e){var n=r.useContext(d),c=n;return e&&(c="function"==typeof e?e(n):o(o({},n),e)),c},l=function(e){var n=i(e.components);return r.createElement(d.Provider,{value:n},e.children)},s="mdxType",f={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},b=r.forwardRef((function(e,n){var c=e.components,t=e.mdxType,a=e.originalType,d=e.parentName,l=x(e,["components","mdxType","originalType","parentName"]),s=i(c),b=t,p=s["".concat(d,".").concat(b)]||s[b]||f[b]||a;return c?r.createElement(p,o(o({ref:n},l),{},{components:c})):r.createElement(p,o({ref:n},l))}));function p(e,n){var c=arguments,t=n&&n.mdxType;if("string"==typeof e||t){var a=c.length,o=new Array(a);o[0]=b;var x={};for(var d in n)hasOwnProperty.call(n,d)&&(x[d]=n[d]);x.originalType=e,x[s]="string"==typeof e?e:t,o[1]=x;for(var i=2;i<a;i++)o[i]=c[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,c)}b.displayName="MDXCreateElement"},8913:(e,n,c)=>{c.r(n),c.d(n,{assets:()=>d,contentTitle:()=>o,default:()=>s,frontMatter:()=>a,metadata:()=>x,toc:()=>i});var r=c(7462),t=(c(7294),c(3905));const a={},o="INFINITE_FREE_TRIAL",x={unversionedId:"2021/RARCTF/challenges/infinite_free_trial",id:"2021/RARCTF/challenges/infinite_free_trial",title:"INFINITE_FREE_TRIAL",description:"- File : ift.zip",source:"@site/docs/2021/RARCTF/challenges/infinite_free_trial.md",sourceDirName:"2021/RARCTF/challenges",slug:"/2021/RARCTF/challenges/infinite_free_trial",permalink:"/docs/2021/RARCTF/challenges/infinite_free_trial",draft:!1,editUrl:"https://github.com/Pynard/writeups-docs/tree/main/packages/create-docusaurus/templates/shared/docs/2021/RARCTF/challenges/infinite_free_trial.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"FANCY_BUTTON_GENERATOR",permalink:"/docs/2021/RARCTF/challenges/fancy_button_generator"},next:{title:"RARPG",permalink:"/docs/2021/RARCTF/challenges/rarpg"}},d={},i=[{value:"REGISTRATION",id:"registration",level:2},{value:"CRC8 check",id:"crc8-check",level:3},{value:"XOR check",id:"xor-check",level:3}],l={toc:i};function s(e){let{components:n,...a}=e;return(0,t.kt)("wrapper",(0,r.Z)({},l,a,{components:n,mdxType:"MDXLayout"}),(0,t.kt)("h1",{id:"infinite_free_trial"},"INFINITE_FREE_TRIAL"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"We've decided to make an app specially for flag hoarding, can you make sure no one can crack it?\n\nNOTE: The flag is a valid registration key\n")),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"File : ",(0,t.kt)("a",{target:"_blank",href:c(767).Z},"ift.zip"))),(0,t.kt)("p",null,"This is a small application in trial mode asking us the registration key"),(0,t.kt)("h2",{id:"registration"},"REGISTRATION"),(0,t.kt)("h3",{id:"crc8-check"},"CRC8 check"),(0,t.kt)("p",null,"A crc check by block of 6 chars is done on the key for 6 blocks so the key must be 36 chars."),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},'\u250c 148: sym.do_crc_check (int64_t arg1);\n\u2502           ; var int64_t var_18h @ rbp-0x18\n\u2502           ; var int64_t var_5h @ rbp-0x5\n\u2502           ; var signed int64_t var_4h @ rbp-0x4\n\u2502           ; arg int64_t arg1 @ rdi\n\u2502           0x00002c9a      55             push rbp\n\u2502           0x00002c9b      4889e5         mov rbp, rsp\n\u2502           0x00002c9e      4883ec20       sub rsp, 0x20\n\u2502           ; DATA XREF from sym.step_timer @ 0x24df\n\u2502           0x00002ca2      48897de8       mov qword [var_18h], rdi    ; arg1\n\u2502           0x00002ca6      c745fc000000.  mov dword [var_4h], 0\n\u2502       \u250c\u2500< 0x00002cad      eb49           jmp 0x2cf8\n\u2502       \u2502   ; CODE XREF from sym.do_crc_check @ 0x2cfc\n\u2502      \u250c\u2500\u2500> 0x00002caf      8b55fc         mov edx, dword [var_4h]\n\u2502      \u254e\u2502   0x00002cb2      89d0           mov eax, edx\n\u2502      \u254e\u2502   0x00002cb4      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002cb6      01d0           add eax, edx\n\u2502      \u254e\u2502   0x00002cb8      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002cba      4863d0         movsxd rdx, eax\n\u2502      \u254e\u2502   ; DATA XREF from sym.register_tm_clones @ 0x2334\n\u2502      \u254e\u2502   0x00002cbd      488b45e8       mov rax, qword [var_18h]\n\u2502      \u254e\u2502   0x00002cc1      4801d0         add rax, rdx\n\u2502      \u254e\u2502   0x00002cc4      be06000000     mov esi, 6\n\u2502      \u254e\u2502   0x00002cc9      4889c7         mov rdi, rax\n\u2502      \u254e\u2502   0x00002ccc      e8f1feffff     call sym.crc8\n\u2502      \u254e\u2502   0x00002cd1      8845fb         mov byte [var_5h], al\n\u2502      \u254e\u2502   0x00002cd4      0fb645fb       movzx eax, byte [var_5h]\n\u2502      \u254e\u2502   0x00002cd8      4898           cdqe\n\u2502      \u254e\u2502   0x00002cda      488d153f0400.  lea rdx, obj.crccheck       ; 0x3120\n\u2502      \u254e\u2502   0x00002ce1      0fb61410       movzx edx, byte [rax + rdx]\n\u2502      \u254e\u2502   0x00002ce5      8b45fc         mov eax, dword [var_4h]\n\u2502      \u254e\u2502   0x00002ce8      4898           cdqe\n\u2502      \u254e\u2502   0x00002cea      488d0daf2400.  lea rcx, obj.crcout         ; 0x51a0\n\u2502      \u254e\u2502   0x00002cf1      881408         mov byte [rax + rcx], dl\n\u2502      \u254e\u2502   0x00002cf4      8345fc01       add dword [var_4h], 1\n\u2502      \u254e\u2502   ; CODE XREF from sym.do_crc_check @ 0x2cad\n\u2502      \u254e\u2514\u2500> 0x00002cf8      837dfc06       cmp dword [var_4h], 6\n\u2502      \u2514\u2500\u2500< 0x00002cfc      7eb1           jle 0x2caf\n\u2502           0x00002cfe      ba07000000     mov edx, 7\n\u2502           0x00002d03      488d053a0500.  lea rax, [0x00003244]       ; "w1nR4rs"\n\u2502           ; DATA XREF from entry0 @ 0x22d8\n\u2502           0x00002d0a      4889c6         mov rsi, rax\n\u2502           0x00002d0d      488d058c2400.  lea rax, obj.crcout         ; 0x51a0\n\u2502           0x00002d14      4889c7         mov rdi, rax\n\u2502           0x00002d17      e8d4f3ffff     call sym.imp.memcmp\n\u2502           0x00002d1c      85c0           test eax, eax\n\u2502       \u250c\u2500< 0x00002d1e      7507           jne 0x2d27\n\u2502       \u2502   0x00002d20      b801000000     mov eax, 1\n\u2502      \u250c\u2500\u2500< 0x00002d25      eb05           jmp 0x2d2c\n\u2502      \u2502\u2502   ; CODE XREF from sym.do_crc_check @ 0x2d1e\n\u2502      \u2502\u2514\u2500> 0x00002d27      b800000000     mov eax, 0\n\u2502      \u2502    ; CODE XREF from sym.do_crc_check @ 0x2d25\n\u2502      \u2514\u2500\u2500> 0x00002d2c      c9             leave\n\u2514           0x00002d2d      c3             ret\n')),(0,t.kt)("p",null,"We can see that the crc of a block is used as an offset in a table ",(0,t.kt)("strong",{parentName:"p"},"obj.crccheck")," and the output is in ",(0,t.kt)("strong",{parentName:"p"},"obj.crcout"),"\nSo : "),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"crcout[i] = crccheck[CRC8(key[i:i+6])]\n")),(0,t.kt)("p",null,"and ",(0,t.kt)("strong",{parentName:"p"},"crcout")," must be equal to ",(0,t.kt)("inlineCode",{parentName:"p"},"w1nR4rs")," to pass the memcmp @ 0x00002d17 and return 1"),(0,t.kt)("p",null,"Here is a small script solving a key that passes the CRC check, this is not the flag but it will allow us to debug the second verification stage"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"File : ",(0,t.kt)("a",{target:"_blank",href:c(6605).Z},"solve_crc.py"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"import itertools\nimport struct\nimport string\nimport crc8\n\ncrccheck = [\n    0x464dd4d6,0xc73ecd53,0x8a506d41,0x8e2cbf22,\n    0x55019c09,0xc5f43510,0x4fd8686b,0xa81315d5,\n    0x3242d308,0xa1940654,0xffadfbe0,0x82319e5f,\n    0xf21eca02,0x47e2d74a,0x14806648,0x2d27da67,\n    0x1140e862,0x81842123,0xcebe1774,0x0eb5929b,\n    0xf799f0c6,0x763adfa6,0xf6d17cdd,0x07b7e9a9,\n    0x7ec27a97,0x304cb390,0x8545fd5d,0xf3e375a3,\n    0x380dbd49,0xfab98bb4,0x2bb259aa,0xe60bcf6a,\n    0xbc3c6305,0x887987e5,0x433403a5,0x897d1def,\n    0xb13358f1,0x7f958378,0xf5b67bdb,0x37ba2f1b,\n    0xd012188d,0x703fe773,0x640a0ca7,0xae6c719f,\n    0xb896eb28,0x868f19a2,0xc9dc0fd9,0xab5e39f9,\n    0x25c1cb51,0xee446520,0x1fa43b5c,0xc829afcc,\n    0x61ac602a,0x4b5bf85a,0x9d8cec93,0x98dec3a0,\n    0xeae436bb,0xb03d0072,0x6f774e24,0x1ac0fe52,\n    0x2e566991,0x04fc169a,0x571c26e1,0xc46ed2ed]\ncrccheck = b''.join([ struct.pack('<I',elt) for elt in crccheck ])\n\ncrc_block = [[ hex(i)[2:] for i,elt in enumerate(crccheck) if elt == c ] for c in b'w1nR4rs' ]\ncrc_block = [ elt[0] for elt in crc_block ]\n\n# bruteforce crc8\nout = [None]*7\ncharset = string.ascii_letters\n\n# 1st block\nout[0] = b'rarctf'\n\n# 2nd block\nfor test in itertools.combinations(charset.encode(),5):\n    test = b'{'+bytes(test)\n    crc_fx = crc8.crc8(test)\n    if crc_fx.hexdigest() == crc_block[1]:\n        out[1] = test \n\n# last block\nfor test in itertools.combinations(charset.encode(),5):\n    test = bytes(test)+b'}'\n    crc_fx = crc8.crc8(test)\n    if crc_fx.hexdigest() == crc_block[-1]:\n        out[-1] = test \n\n# other blocks\nfor test in itertools.combinations(charset.encode(),6):\n    test = bytes(test)\n    crc_fx = crc8.crc8(test)\n    if crc_fx.hexdigest() in crc_block[2:-1]:\n        for i,elt in enumerate(crc_block):\n            if elt == crc_fx.hexdigest():\n                out[i] = test \n        if all([ elt != None for elt in out]):\n            break\n\nout = b''.join(out)\nprint(out.decode())\n")),(0,t.kt)("p",null,"Giving us : ",(0,t.kt)("inlineCode",{parentName:"p"},"rarctf{RUXYZabceRSabceRUabceEKabcezWMUVXZ}")),(0,t.kt)("h3",{id:"xor-check"},"XOR check"),(0,t.kt)("p",null,"Here a XOR is done between 6 chars block and is compared with the ",(0,t.kt)("strong",{parentName:"p"},"obj.xorcheck")," table :"),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre"},"\u250c 161: sym.do_xor_check (int64_t arg1);\n\u2502           ; var int64_t var_18h @ rbp-0x18\n\u2502           ; var signed int64_t var_4h @ rbp-0x4\n\u2502           ; arg int64_t arg1 @ rdi\n\u2502           0x00002d2e      55             push rbp\n\u2502           0x00002d2f      4889e5         mov rbp, rsp\n\u2502           0x00002d32      4883ec20       sub rsp, 0x20\n\u2502           0x00002d36      48897de8       mov qword [var_18h], rdi    ; arg1\n\u2502           0x00002d3a      c745fc000000.  mov dword [var_4h], 0\n\u2502       \u250c\u2500< 0x00002d41      eb56           jmp 0x2d99\n\u2502       \u2502   ; CODE XREF from sym.do_xor_check @ 0x2d9d\n\u2502      \u250c\u2500\u2500> 0x00002d43      8b55fc         mov edx, dword [var_4h]\n\u2502      \u254e\u2502   0x00002d46      89d0           mov eax, edx\n\u2502      \u254e\u2502   0x00002d48      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002d4a      01d0           add eax, edx\n\u2502      \u254e\u2502   0x00002d4c      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002d4e      4898           cdqe\n\u2502      \u254e\u2502   0x00002d50      488d15692400.  lea rdx, obj.xorout         ; 0x51c0\n\u2502      \u254e\u2502   0x00002d57      4801c2         add rdx, rax\n\u2502      \u254e\u2502   0x00002d5a      8b45fc         mov eax, dword [var_4h]\n\u2502      \u254e\u2502   0x00002d5d      8d4801         lea ecx, [rax + 1]\n\u2502      \u254e\u2502   0x00002d60      89c8           mov eax, ecx\n\u2502      \u254e\u2502   0x00002d62      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002d64      01c8           add eax, ecx\n\u2502      \u254e\u2502   0x00002d66      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002d68      4863c8         movsxd rcx, eax\n\u2502      \u254e\u2502   0x00002d6b      488b45e8       mov rax, qword [var_18h]\n\u2502      \u254e\u2502   0x00002d6f      488d3401       lea rsi, [rcx + rax]\n\u2502      \u254e\u2502   0x00002d73      8b4dfc         mov ecx, dword [var_4h]\n\u2502      \u254e\u2502   0x00002d76      89c8           mov eax, ecx\n\u2502      \u254e\u2502   0x00002d78      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002d7a      01c8           add eax, ecx\n\u2502      \u254e\u2502   0x00002d7c      01c0           add eax, eax\n\u2502      \u254e\u2502   0x00002d7e      4863c8         movsxd rcx, eax\n\u2502      \u254e\u2502   0x00002d81      488b45e8       mov rax, qword [var_18h]\n\u2502      \u254e\u2502   0x00002d85      4801c8         add rax, rcx\n\u2502      \u254e\u2502   0x00002d88      b906000000     mov ecx, 6\n\u2502      \u254e\u2502   0x00002d8d      4889c7         mov rdi, rax\n\u2502      \u254e\u2502   0x00002d90      e8a8feffff     call sym.xor_block\n\u2502      \u254e\u2502   0x00002d95      8345fc01       add dword [var_4h], 1\n\u2502      \u254e\u2502   ; CODE XREF from sym.do_xor_check @ 0x2d41\n\u2502      \u254e\u2514\u2500> 0x00002d99      837dfc05       cmp dword [var_4h], 5\n\u2502      \u2514\u2500\u2500< 0x00002d9d      7ea4           jle 0x2d43\n\u2502           0x00002d9f      ba24000000     mov edx, 0x24               ; '$'\n\u2502           0x00002da4      488d05750400.  lea rax, obj.xorcheck       ; 0x3220 ; \"\\t\\x16\\x17\\x0f\\x17V\\x16D:\\x18So\\x14\\x03*\\x06o1\\x1cG*\\x06-_Q\\x1b\"\n\u2502           0x00002dab      4889c6         mov rsi, rax\n\u2502           0x00002dae      488d050b2400.  lea rax, obj.xorout         ; 0x51c0\n\u2502           0x00002db5      4889c7         mov rdi, rax\n\u2502           0x00002db8      e833f3ffff     call sym.imp.memcmp\n\u2502           0x00002dbd      85c0           test eax, eax\n\u2502       \u250c\u2500< 0x00002dbf      7507           jne 0x2dc8\n\u2502       \u2502   0x00002dc1      b801000000     mov eax, 1\n\u2502      \u250c\u2500\u2500< 0x00002dc6      eb05           jmp 0x2dcd\n\u2502      \u2502\u2502   ; CODE XREF from sym.do_xor_check @ 0x2dbf\n\u2502      \u2502\u2514\u2500> 0x00002dc8      b800000000     mov eax, 0\n\u2502      \u2502    ; CODE XREF from sym.do_xor_check @ 0x2dc6\n\u2502      \u2514\u2500\u2500> 0x00002dcd      c9             leave\n\u2514           0x00002dce      c3             ret\n")),(0,t.kt)("p",null,"The main loop is done 6 times and the xor block is done in the ",(0,t.kt)("strong",{parentName:"p"},"xor_block")," function."),(0,t.kt)("p",null,"Now we can see that the first step was not necessary because the flag can be recover with the ",(0,t.kt)("strong",{parentName:"p"},"xorcheck")," table if the first key block is known..... -_-"),(0,t.kt)("p",null,"Yet the first key block is known : ",(0,t.kt)("inlineCode",{parentName:"p"},"rarctf"),"\nHere is a script that solve the xor check from ",(0,t.kt)("strong",{parentName:"p"},"xorcheck")," table"),(0,t.kt)("ul",null,(0,t.kt)("li",{parentName:"ul"},"File : ",(0,t.kt)("a",{target:"_blank",href:c(7208).Z},"solve_xor.py"))),(0,t.kt)("pre",null,(0,t.kt)("code",{parentName:"pre",className:"language-python"},"import struct\n\nxorcheck = [\n0x0f171609,0x44165617,0x6f53183a,0x062a0314,\n0x471c316f,0x5f2d062a,0x46001b51,0x5504004a,\n0x4c015066,0x526e3177,0x00737234,0x3b031b01]\nxorcheck = b''.join([ struct.pack('<I',elt) for elt in xorcheck ])\n\nkey = 'rarctf'\n\nfor i,elt in enumerate(xorcheck[:0x24]):\n    key += chr(ord(key[i])^elt)\nprint(key)\n")),(0,t.kt)("p",null,"Giving us : ",(0,t.kt)("inlineCode",{parentName:"p"},"rarctf{welc0m3_t0_y0ur_new_tr14l_281099b9}")),(0,t.kt)("p",null,"flag : ",(0,t.kt)("inlineCode",{parentName:"p"},"rarctf{welc0m3_t0_y0ur_new_tr14l_281099b9}")))}s.isMDXComponent=!0},767:(e,n,c)=>{c.d(n,{Z:()=>r});const r=c.p+"assets/files/ift-5292835fabc694484d132c7a4724dcb5.zip"},6605:(e,n,c)=>{c.d(n,{Z:()=>r});const r=c.p+"assets/files/solve_crc-48db4e04e329a56921b626ae090033dc.py"},7208:(e,n,c)=>{c.d(n,{Z:()=>r});const r=c.p+"assets/files/solve_xor-f289c77c83008f74590a0aadcd4be1e9.py"}}]);