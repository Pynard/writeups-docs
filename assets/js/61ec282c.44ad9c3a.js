"use strict";(self.webpackChunkwriteups_docs=self.webpackChunkwriteups_docs||[]).push([[6173],{3905:(e,t,n)=>{n.d(t,{Zo:()=>p,kt:()=>f});var r=n(7294);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function o(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);t&&(r=r.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,r)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?o(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):o(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,r,a=function(e,t){if(null==e)return{};var n,r,a={},o=Object.keys(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||(a[n]=e[n]);return a}(e,t);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(r=0;r<o.length;r++)n=o[r],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(a[n]=e[n])}return a}var c=r.createContext({}),i=function(e){var t=r.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},p=function(e){var t=i(e.components);return r.createElement(c.Provider,{value:t},e.children)},u="mdxType",d={inlineCode:"code",wrapper:function(e){var t=e.children;return r.createElement(r.Fragment,{},t)}},h=r.forwardRef((function(e,t){var n=e.components,a=e.mdxType,o=e.originalType,c=e.parentName,p=l(e,["components","mdxType","originalType","parentName"]),u=i(n),h=a,f=u["".concat(c,".").concat(h)]||u[h]||d[h]||o;return n?r.createElement(f,s(s({ref:t},p),{},{components:n})):r.createElement(f,s({ref:t},p))}));function f(e,t){var n=arguments,a=t&&t.mdxType;if("string"==typeof e||a){var o=n.length,s=new Array(o);s[0]=h;var l={};for(var c in t)hasOwnProperty.call(t,c)&&(l[c]=t[c]);l.originalType=e,l[u]="string"==typeof e?e:a,s[1]=l;for(var i=2;i<o;i++)s[i]=n[i];return r.createElement.apply(null,s)}return r.createElement.apply(null,n)}h.displayName="MDXCreateElement"},3447:(e,t,n)=>{n.r(t),n.d(t,{assets:()=>c,contentTitle:()=>s,default:()=>u,frontMatter:()=>o,metadata:()=>l,toc:()=>i});var r=n(7462),a=(n(7294),n(3905));const o={},s="SALTY",l={unversionedId:"2020/BRIXEL/challenges/salty",id:"2020/BRIXEL/challenges/salty",title:"SALTY",description:"By looking at the hash length the hashing function must be md5",source:"@site/docs/2020/BRIXEL/challenges/salty.md",sourceDirName:"2020/BRIXEL/challenges",slug:"/2020/BRIXEL/challenges/salty",permalink:"/docs/2020/BRIXEL/challenges/salty",draft:!1,editUrl:"https://github.com/Pynard/writeups-docs/tree/main/packages/create-docusaurus/templates/shared/docs/2020/BRIXEL/challenges/salty.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"REGISTERE ME",permalink:"/docs/2020/BRIXEL/challenges/registereme"},next:{title:"SCAN ME",permalink:"/docs/2020/BRIXEL/challenges/scan_me"}},c={},i=[],p={toc:i};function u(e){let{components:t,...n}=e;return(0,a.kt)("wrapper",(0,r.Z)({},p,n,{components:t,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"salty"},"SALTY"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"Our l33t hackers hacked a bulletin board and gained access to the database. We need to find the admin password.\n\nThe user's database info is:\n\nUsername:admin\n\nPasswordhash:2bafea54caf6f8d718be0f234793a9be\n\nSalt:04532@#!!\n\n\nWe know from the source code that the salt is put AFTER the password, then hashed. We also know the user likes to use lowercase passwords of only 5 characters long.\n\nThe flag is the plaintext password.\n")),(0,a.kt)("p",null,"By looking at the hash length the hashing function must be md5\nlets write a python bruteforce code"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"import itertools\nimport hashlib\nimport string\n\npwd_hash = '2bafea54caf6f8d718be0f234793a9be'\nsalt = b'04532@#!!'\n\nfor key in itertools.product(string.ascii_lowercase,repeat=5):\n    key = ''.join(key).encode()\n    if hashlib.md5(key+salt).hexdigest() == pwd_hash:\n        print('key =',key.decode())\n        break\n")),(0,a.kt)("p",null,"Response :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"key = 'brute'\n")),(0,a.kt)("p",null,"flag : ",(0,a.kt)("inlineCode",{parentName:"p"},"brixelCTF{brute}")))}u.isMDXComponent=!0}}]);