"use strict";(self.webpackChunkwriteups_docs=self.webpackChunkwriteups_docs||[]).push([[119],{3905:(e,n,t)=>{t.d(n,{Zo:()=>c,kt:()=>d});var r=t(7294);function a(e,n,t){return n in e?Object.defineProperty(e,n,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[n]=t,e}function p(e,n){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);n&&(r=r.filter((function(n){return Object.getOwnPropertyDescriptor(e,n).enumerable}))),t.push.apply(t,r)}return t}function o(e){for(var n=1;n<arguments.length;n++){var t=null!=arguments[n]?arguments[n]:{};n%2?p(Object(t),!0).forEach((function(n){a(e,n,t[n])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(n){Object.defineProperty(e,n,Object.getOwnPropertyDescriptor(t,n))}))}return e}function l(e,n){if(null==e)return{};var t,r,a=function(e,n){if(null==e)return{};var t,r,a={},p=Object.keys(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||(a[t]=e[t]);return a}(e,n);if(Object.getOwnPropertySymbols){var p=Object.getOwnPropertySymbols(e);for(r=0;r<p.length;r++)t=p[r],n.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(a[t]=e[t])}return a}var s=r.createContext({}),i=function(e){var n=r.useContext(s),t=n;return e&&(t="function"==typeof e?e(n):o(o({},n),e)),t},c=function(e){var n=i(e.components);return r.createElement(s.Provider,{value:n},e.children)},u="mdxType",m={inlineCode:"code",wrapper:function(e){var n=e.children;return r.createElement(r.Fragment,{},n)}},g=r.forwardRef((function(e,n){var t=e.components,a=e.mdxType,p=e.originalType,s=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),u=i(t),g=a,d=u["".concat(s,".").concat(g)]||u[g]||m[g]||p;return t?r.createElement(d,o(o({ref:n},c),{},{components:t})):r.createElement(d,o({ref:n},c))}));function d(e,n){var t=arguments,a=n&&n.mdxType;if("string"==typeof e||a){var p=t.length,o=new Array(p);o[0]=g;var l={};for(var s in n)hasOwnProperty.call(n,s)&&(l[s]=n[s]);l.originalType=e,l[u]="string"==typeof e?e:a,o[1]=l;for(var i=2;i<p;i++)o[i]=t[i];return r.createElement.apply(null,o)}return r.createElement.apply(null,t)}g.displayName="MDXCreateElement"},4818:(e,n,t)=>{t.r(n),t.d(n,{assets:()=>s,contentTitle:()=>o,default:()=>u,frontMatter:()=>p,metadata:()=>l,toc:()=>i});var r=t(7462),a=(t(7294),t(3905));const p={},o="# BABYCRYPT",l={unversionedId:"2021/RARCTF/challenges/babycrypt",id:"2021/RARCTF/challenges/babycrypt",title:"# BABYCRYPT",description:"BABYCRYPT",source:"@site/docs/2021/RARCTF/challenges/babycrypt.md",sourceDirName:"2021/RARCTF/challenges",slug:"/2021/RARCTF/challenges/babycrypt",permalink:"/writeups-docs/docs/2021/RARCTF/challenges/babycrypt",draft:!1,editUrl:"https://github.com/pynard/writeups-docs/tree/main/docs/2021/RARCTF/challenges/babycrypt.md",tags:[],version:"current",frontMatter:{},sidebar:"tutorialSidebar",previous:{title:"ARCHER",permalink:"/writeups-docs/docs/2021/RARCTF/challenges/archer"},next:{title:"DOTTY",permalink:"/writeups-docs/docs/2021/RARCTF/challenges/dotty"}},s={},i=[{value:"The problem",id:"the-problem",level:2},{value:"The solution",id:"the-solution",level:3}],c={toc:i};function u(e){let{components:n,...p}=e;return(0,a.kt)("wrapper",(0,r.Z)({},c,p,{components:n,mdxType:"MDXLayout"}),(0,a.kt)("h1",{id:"-babycrypt"},"# BABYCRYPT"),(0,a.kt)("p",null,(0,a.kt)("img",{src:t(9157).Z,title:"unknown.png",width:"796",height:"244"})),(0,a.kt)("h2",{id:"the-problem"},"The problem"),(0,a.kt)("p",null,"Let's take a look to the encryption part ",(0,a.kt)("strong",{parentName:"p"},"server.py"),". So, first the script generates 2 prime numbers ",(0,a.kt)("strong",{parentName:"p"},"p")," & ",(0,a.kt)("strong",{parentName:"p"},"q")," of 256 bits and ensures that ",(0,a.kt)("strong",{parentName:"p"},"p")," is less than ",(0,a.kt)("strong",{parentName:"p"},"q"),". Then it returns, the public exponent ",(0,a.kt)("strong",{parentName:"p"},"e"),", the modulus ",(0,a.kt)("strong",{parentName:"p"},"n"),", the ciphertext ",(0,a.kt)("strong",{parentName:"p"},"c"),", and a hint, which is ",(0,a.kt)("strong",{parentName:"p"},"n % (q-1)"),". "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"from Crypto.Util.number import getPrime, bytes_to_long\n\nflag = bytes_to_long(open(\"/challenge/flag.txt\", \"rb\").read())\n\ndef genkey():\n    e = 0x10001\n    p, q = getPrime(256), getPrime(256)\n    if p <= q:\n      p, q = q, p\n    n = p * q\n    pubkey = (e, n)\n    privkey = (p, q)\n    return pubkey, privkey\n\ndef encrypt(m, pubkey):\n    e, n = pubkey\n    c = pow(m, e, n)\n    return c\n\npubkey, privkey = genkey()\nc = encrypt(flag, pubkey)\nhint = pubkey[1] % (privkey[1] - 1)\nprint('pubkey:', pubkey)\nprint('hint:', hint)\nprint('c:', c)\n")),(0,a.kt)("p",null,"Let's get these numbers with the IP provided : "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre"},"nc 193.57.159.27 27855\n")),(0,a.kt)("p",null,"And we get : "),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"e = 65537\nn = 9205850565099355009233119992333308509057926987587516553442010262770434065524651458723071213422539739783091104957937112504373819793996033829929775503108243\nc = 7373290721518384012603108696715714033444163435512092120442505886297149465422635100860419886468382605598579995038885045596223387641682763096919583716818416\n\nhint = 571338771748514167423682983583747408415015678000205027955504564266299803503\n")),(0,a.kt)("p",null,"The goal is to uncipher ",(0,a.kt)("strong",{parentName:"p"},"c")," to get the flag under the form",(0,a.kt)("inlineCode",{parentName:"p"},"rarctf{something}")),(0,a.kt)("h3",{id:"the-solution"},"The solution"),(0,a.kt)("p",null,"Let's note ",(0,a.kt)("inlineCode",{parentName:"p"},"R = hint")," for more conveniency. We have : "),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"n = p","*","q")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"p > q")),(0,a.kt)("p",null,(0,a.kt)("strong",{parentName:"p"},"n % (q - 1) = R")),(0,a.kt)("p",null,"In order to resolve the problem, we need to factorize ",(0,a.kt)("strong",{parentName:"p"},"n"),". So, we need to find ",(0,a.kt)("strong",{parentName:"p"},"q")," and ",(0,a.kt)("strong",{parentName:"p"},"p"),". Testing ",(0,a.kt)("strong",{parentName:"p"},"n")," in ",(0,a.kt)("inlineCode",{parentName:"p"},"factor.db")," gives nothing. So we need do some math :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"n mod (q-1) = R\np*q mod (q-1) = R\n[ p mod (q-1) * q mod (q-1) ] mod (q-1) =R\n[ p mod (q-1) * 1 ] mod (q-1) = R\n[ p mod (q-1) ] mod (q-1) = R\np mod (q-1) = R\n\np ~ q and q < p \n=>  p = k*(q-1) + R   where k = 1 because q ~ p\n=>  p = q - 1 + R\n=>  p - q = R - 1 \n\nor n = p * q\n=> n = q * (q + R -1)\n=> q^2 + (R-1) * q - n = 0\n\nFind the positive root and we have q, next we have p, next we break it lul\n")),(0,a.kt)("p",null,"To find ",(0,a.kt)("strong",{parentName:"p"},"q"),", we need to solve the equation above. Let's use Sage to do this :"),(0,a.kt)("pre",null,(0,a.kt)("code",{parentName:"pre",className:"language-python"},"sage: e = 65537                                                                                                  \nsage: n = 9205850565099355009233119992333308509057926987587516553442010262770434065524651458723071213422539739783091104957937112504373819793996033829929775503108243\nsage: c = 7373290721518384012603108696715714033444163435512092120442505886297149465422635100860419886468382605598579995038885045596223387641682763096919583716818416                                                                       \nsage: R = 571338771748514167423682983583747408415015678000205027955504564266299803503  \nsage: var('t')                                                                                                                     \nsage: Pol = t^2+t*(R-1)-n \nsage: solve(Pol,t)                                                                                                                        \n[t == 95661879681818872731638606929439794975150932660862158767273961317066822333587, \n t == -96233218453567386899062289913023542383565948338862363795229465881333122137089]\n\nsage: q = 95661879681818872731638606929439794975150932660862158767273961317066822333587\nsage: p = n/q\nsage: p\n96233218453567386899062289913023542383565948338862363795229465881333122137089\nsage: p*q == n \nTrue # So we have p and q !\nsage: d = pow(e,-1,(p-1)*(q-1))\nsage: d\n7525291550178795884914566387678293738739343004806842307666643511411881291367347791355702688078467521251399949304045751083067891511306720238422997433554945\nsage: m = pow(c,d,n)\nsage: m\n21282889459489084011886583837365850378164449578188153850335772055863288361368436716339359416861416171924194634444635934246077740557666778378\n")),(0,a.kt)("p",null,"Converting ",(0,a.kt)("strong",{parentName:"p"},"m")," with ",(0,a.kt)("strong",{parentName:"p"},"long_to_bytes()")," function (from pycryptodome python package) and we obtain the flag:"),(0,a.kt)("p",null,"flag : ",(0,a.kt)("inlineCode",{parentName:"p"},"rarctf{g3n3r1c_m4th5_equ4t10n_th1ng_ch4ll3ng3_5a174f54e6}")))}u.isMDXComponent=!0},9157:(e,n,t)=>{t.d(n,{Z:()=>r});const r=t.p+"assets/images/unknown-0209bf4ecb44805dac62513bc93812db.png"}}]);